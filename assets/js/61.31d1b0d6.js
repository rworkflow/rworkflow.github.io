(window.webpackJsonp=window.webpackJsonp||[]).push([[61],{369:function(t,s,a){"use strict";a.r(s);var e=a(43),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"rcwl-rcwlpipelines-case-study-scrna-seq-data-preprocessing"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rcwl-rcwlpipelines-case-study-scrna-seq-data-preprocessing"}},[t._v("#")]),t._v(" Rcwl/RcwlPipelines case study: scRNA-seq data preprocessing")]),t._v(" "),a("h2",{attrs:{id:"introduction"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#introduction"}},[t._v("#")]),t._v(" Introduction")]),t._v(" "),a("p",[t._v("Here we demonstrate a case study for scRNA-seq data preprocessing\nusing "),a("code",[t._v("RcwlPipeline")]),t._v(" tools and pipeline.")]),t._v(" "),a("p",[t._v("10x Genomics has its own preprocessing pipeline "),a("code",[t._v("Cell Ranger")]),t._v(" to\nprocess the scRNA-seq outputs it produces to perform the\ndemultiplexing and quantification. However, it requires much\nconfiguration to run and is significantly slower than other mappers.")]),t._v(" "),a("p",[t._v("In this case study,\n"),a("a",{attrs:{href:"https://github.com/alexdobin/STAR/blob/master/docs/STARsolo.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("STARsolo"),a("OutboundLink")],1),t._v("\nis used for alignment and quantification, which produces a count\nmatrix from FASTQ.\n"),a("a",{attrs:{href:"https://bioconductor.org/packages/DropletUtils/",target:"_blank",rel:"noopener noreferrer"}},[t._v("DropletUtils"),a("OutboundLink")],1),t._v(" is\nused for filtering raw gene-barcode matrix and removing empty\ndroplets, which produces a high-quality count matrix with feature/cell\nannotation files saved in an "),a("em",[t._v("R")]),t._v(" object of "),a("code",[t._v("SingleCellExperiment")]),t._v(".\nBefore these, a one-time indexing step using\n"),a("a",{attrs:{href:"https://hbctraining.github.io/Intro-to-rnaseq-hpc-O2/lessons/03_alignment.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("STARindex"),a("OutboundLink")],1),t._v("\nis also included in this case study.")]),t._v(" "),a("h2",{attrs:{id:"scrna-seq-data-source"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#scrna-seq-data-source"}},[t._v("#")]),t._v(" scRNA-seq data source")]),t._v(" "),a("p",[t._v("The scRNA-seq data source is the 1k PBMCs from 10x genomics (These\nsource files are provided in the\n"),a("a",{attrs:{href:"https://zenodo.org/record/3457880",target:"_blank",rel:"noopener noreferrer"}},[t._v("Zenodo"),a("OutboundLink")],1),t._v(" data repository).")]),t._v(" "),a("p",[t._v("The dataset used in this tutorial are sub-sampled from the source\nfiles to contain only 15 cells instead of 1000. The data curation is\nfor demo purpose only so that the execution of the Rcwl scRNA-seq\npreprocessing tools or pipeline in R can be completed within 1~2\nminutes.")]),t._v(" "),a("p",[t._v('The "*.fastq" data was curated to only include reads on chromosome 21.')]),t._v(" "),a("p",[t._v("“subset15_demo_barcode.txt” contains known cell barcodes for mapping\nand only 15 barcodes are included.")]),t._v(" "),a("p",[t._v('"Homo_sapiens.GRCh37.75.21.gtf" contains the hg19 GTF file to annotate\nreads, which was curated on chromosome 21 only.')]),t._v(" "),a("p",[t._v("Data can be loaded from the dedicated "),a("a",{attrs:{href:"https://github.com/rworkflow/testdata",target:"_blank",rel:"noopener noreferrer"}},[t._v("GitHub\nrepository"),a("OutboundLink")],1),t._v(" or the\n"),a("a",{attrs:{href:"https://zenodo.org/record/4573881",target:"_blank",rel:"noopener noreferrer"}},[t._v("Zenodo"),a("OutboundLink")],1),t._v(" data repository.")]),t._v(" "),a("div",{staticClass:"language-r extra-class"},[a("pre",{pre:!0,attrs:{class:"language-r"}},[a("code",[t._v("library"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("git2r"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nclone"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"https://github.com/rworkflow/testdata"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"rcwl_data_supp"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("div",{staticClass:"language-r extra-class"},[a("pre",{pre:!0,attrs:{class:"language-r"}},[a("code",[t._v("path "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"rcwl_data_supp"')]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## source data")]),t._v("\ndir"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("path"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("Here we also create an output directory to save result files from\nrunning the tool/pipeline.")]),t._v(" "),a("div",{staticClass:"language-r extra-class"},[a("pre",{pre:!0,attrs:{class:"language-r"}},[a("code",[t._v("outpath "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"outdir"')]),t._v(" \ndir.create"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("outpath"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" showWarnings "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("FALSE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h2",{attrs:{id:"load-the-packages-and-sync-all-tools"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#load-the-packages-and-sync-all-tools"}},[t._v("#")]),t._v(" Load the packages and sync all tools")]),t._v(" "),a("h3",{attrs:{id:"install-packages"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#install-packages"}},[t._v("#")]),t._v(" Install packages")]),t._v(" "),a("p",[t._v("If this is the first time you use "),a("code",[t._v("Rcwl")]),t._v(" or "),a("code",[t._v("RcwlPipelines")]),t._v(", you need\nto install the packages:")]),t._v(" "),a("p",[t._v("The package can be installed from Bioconductor (>= 3.9):")]),t._v(" "),a("div",{staticClass:"language-r extra-class"},[a("pre",{pre:!0,attrs:{class:"language-r"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("requireNamespace"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"BiocManager"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" quietly "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("TRUE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    install.packages"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"BiocManager"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nBiocManager"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("install"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Rcwl"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"RcwlPipelines"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("Or use the most updated version from GitHub:")]),t._v(" "),a("div",{staticClass:"language-r extra-class"},[a("pre",{pre:!0,attrs:{class:"language-r"}},[a("code",[t._v("BiocManager"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("install"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"rworkflow/Rcwl"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"rworkflow/RcwlPipelines"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("Load the packages:")]),t._v(" "),a("div",{staticClass:"language-r extra-class"},[a("pre",{pre:!0,attrs:{class:"language-r"}},[a("code",[t._v("library"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Rcwl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nlibrary"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("RcwlPipelines"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"load-scrna-seq-pre-processing-tools"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#load-scrna-seq-pre-processing-tools"}},[t._v("#")]),t._v(" Load scRNA-seq pre-processing tools")]),t._v(" "),a("p",[t._v("Three core functions: "),a("code",[t._v("cwlUpdate")]),t._v(", "),a("code",[t._v("cwlSearch")]),t._v(" and "),a("code",[t._v("cwlLoad")]),t._v("from\n"),a("code",[t._v("RcwlPipelines")]),t._v(" will be needed for updating, searching, and loading\nthe needed tools or pipelines in "),a("em",[t._v("R")]),t._v(".")]),t._v(" "),a("p",[t._v("The "),a("code",[t._v("cwlUpdate")]),t._v(" function syncs the current "),a("code",[t._v("Rcwl")]),t._v(" recipes and returns\na "),a("code",[t._v("cwlHub")]),t._v(" object which contains the most updated "),a("code",[t._v("Rcwl")]),t._v(" recipes. The\n"),a("code",[t._v("mcols()")]),t._v(" function returns all related information about each\navailable tool or pipeline.  The recipes will be locally cached, so\nusers don't need to call "),a("code",[t._v("cwlUpdate")]),t._v(" every time unless they want to\nuse a tool/pipeline that is newly added to "),a("code",[t._v("RcwlPipelines")]),t._v(".")]),t._v(" "),a("p",[t._v("In this example, we are using the Bioc 3.13 which is the current devel\nversion.")]),t._v(" "),a("div",{staticClass:"language-r extra-class"},[a("pre",{pre:!0,attrs:{class:"language-r"}},[a("code",[t._v("atls "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<-")]),t._v(" cwlUpdate"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("branch "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"dev"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" force "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("TRUE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## sync the tools/pipelines. ")]),t._v("\natls\ntable"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mcols"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("atls"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("$")]),t._v("Type"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[a("code",[t._v("cwlSearch")]),t._v(' is used to search for specific tools/pipelines of\ninterest. Multiple keywords can be used for an internal search of\n"rname", "rpath", "fpath", "Command" and "Containers" columns in the\n'),a("code",[t._v("mcols()")]),t._v(".")]),t._v(" "),a("div",{staticClass:"language-r extra-class"},[a("pre",{pre:!0,attrs:{class:"language-r"}},[a("code",[t._v("tls "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<-")]),t._v(" cwlSearch"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"STAR"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"index"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nmcols"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tls"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[a("code",[t._v("cwlLoad")]),t._v(" loads the "),a("code",[t._v("Rcwl")]),t._v(" tool/pipeline into the "),a("em",[t._v("R")]),t._v(" working\nenvironment. Here we load all the 3 tools that will be needed for the\nscRNA-seq data preprocessing. The recipes for developing these tools\ncan be found in the "),a("a",{attrs:{href:"https://github.com/rworkflow/RcwlRecipes/tree/master/Rcwl",target:"_blank",rel:"noopener noreferrer"}},[t._v("GitHub\nrepository"),a("OutboundLink")],1),t._v("\nincluding\n"),a("a",{attrs:{href:"https://github.com/rworkflow/RcwlRecipes/blob/master/Rcwl/tl_STARindex.R",target:"_blank",rel:"noopener noreferrer"}},[t._v("tl_STARindex"),a("OutboundLink")],1),t._v(",\n"),a("a",{attrs:{href:"https://github.com/rworkflow/RcwlRecipes/blob/master/Rcwl/tl_STARsolo.R",target:"_blank",rel:"noopener noreferrer"}},[t._v("tl_STARsolo"),a("OutboundLink")],1),t._v(",\nand\n"),a("a",{attrs:{href:"https://github.com/rworkflow/RcwlRecipes/blob/master/Rcwl/tl_DropletUtils.R",target:"_blank",rel:"noopener noreferrer"}},[t._v("tl_DropletUtils"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("div",{staticClass:"language-r extra-class"},[a("pre",{pre:!0,attrs:{class:"language-r"}},[a("code",[t._v("STARindex "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<-")]),t._v(" cwlLoad"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("title"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tls"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('## "tl_STARindex"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## equivalent:")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## STARindex <- cwlLoad(mcols(tls)$fpath[2])")]),t._v("\nSTARsolo "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<-")]),t._v(" cwlLoad"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"tl_STARsolo"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nDropletUtils "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<-")]),t._v(" cwlLoad"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"tl_DropletUtils"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h2",{attrs:{id:"scrna-seq-preprocessing"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#scrna-seq-preprocessing"}},[t._v("#")]),t._v(" scRNA-seq preprocessing")]),t._v(" "),a("h3",{attrs:{id:"indexing"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#indexing"}},[t._v("#")]),t._v(" Indexing")]),t._v(" "),a("p",[t._v("Before read alignment and quality control, a one-time genome indexing\nneeds to be done. The command line using "),a("code",[t._v("STAR")]),t._v(" will look like this:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ STAR --runMode genomeGenerate --runThreadN 4 --genomeDir STARindex \n--genomeFastaFiles chr21.fa --sjdbGTFfile Homo_sapiens.GRCh37.75.21.gtf\n")])])]),a("p",[t._v("We can equivalently index the genome using the "),a("code",[t._v("Rcwl")]),t._v(" tool of\n"),a("code",[t._v("STARindex")]),t._v(" within "),a("em",[t._v("R")]),t._v(", which was internally passed as cwl scripts, by\nonly assigning values to the input parameters, and execute the cwl\nscript using one of the execution functions, e.g., "),a("code",[t._v("runCWL")]),t._v(" in the\nlocal computer. Then the output files are ready to pass as input to\nthe next tool for single cell read alignment.")]),t._v(" "),a("p",[t._v("Assign values to the input parameters:")]),t._v(" "),a("div",{staticClass:"language-r extra-class"},[a("pre",{pre:!0,attrs:{class:"language-r"}},[a("code",[t._v("STARindex"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("$")]),t._v("genomeFastaFiles "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<-")]),t._v(" file.path"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("path"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"chr21.fa"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nSTARindex"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("$")]),t._v("sjdbGTFfile "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<-")]),t._v(" file.path"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("path"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Homo_sapiens.GRCh37.75.21.gtf"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nrunCWL"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cwl "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" STARindex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" outdir "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" file.path"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("outpath"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"STARindex_output"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" docker "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("TRUE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ndir"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("file.path"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("outpath"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"STARindex_output"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" recursive "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("TRUE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## output files")]),t._v("\n")])])]),a("p",[t._v("Note that the "),a("code",[t._v("docker")]),t._v(" argument in "),a("code",[t._v("runCWL")]),t._v(" function takes 4 values:")]),t._v(" "),a("ol",[a("li",[t._v("TRUE (default, recommended), which automatically pulls docker\nimages for the required command line tools.")]),t._v(" "),a("li",[t._v("FALSE, if users have already pre-installed all required command\nline tools.")]),t._v(" "),a("li",[t._v('"singularity" if the running environment doesn\'t support docker but\nsingularity.')]),t._v(" "),a("li",[t._v('"udocker" for the docker-like runtime without any administrator\nprivileges.')])]),t._v(" "),a("h3",{attrs:{id:"alignment"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#alignment"}},[t._v("#")]),t._v(" Alignment")]),t._v(" "),a("p",[t._v("Assign values to input parameters:")]),t._v(" "),a("div",{staticClass:"language-r extra-class"},[a("pre",{pre:!0,attrs:{class:"language-r"}},[a("code",[t._v("cdna.fastq "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<-")]),t._v(" file.path"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("path"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" list.files"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("path"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" pattern "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"_R2_"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ncb.fastq "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<-")]),t._v(" file.path"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("path"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" list.files"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("path"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" pattern "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"_R1_"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ncblist "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<-")]),t._v(" file.path"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("path"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"subset15_demo_barcode.txt"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ngenomeDir "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<-")]),t._v(" file.path"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("outpath"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"STARindex_output/STARindex"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\ninputs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("STARsolo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nSTARsolo"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("$")]),t._v("readFilesIn_cdna "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<-")]),t._v(" cdna.fastq\nSTARsolo"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("$")]),t._v("readFilesIn_cb "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<-")]),t._v(" cb.fastq\nSTARsolo"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("$")]),t._v("whiteList "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<-")]),t._v(" cblist\nSTARsolo"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("$")]),t._v("genomeDir "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<-")]),t._v(" genomeDir\n\nrunCWL"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("STARsolo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" outdir "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" file.path"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("outpath"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"STARsolo_output"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ndir"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("file.path"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("outpath"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"STARsolo_output"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" recursive "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("TRUE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v('The output files generated in the "STARsolo_output" folder can now be\npassed into the next tool for QC.')]),t._v(" "),a("h3",{attrs:{id:"count-filtering"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#count-filtering"}},[t._v("#")]),t._v(" Count filtering")]),t._v(" "),a("p",[t._v("To get a high-quality count matrix we apply the "),a("code",[t._v("DropletUtils")]),t._v(" "),a("em",[t._v("Bioconductor")]),t._v(" package, which will produce a filtered dataset that is\nmore representative of the "),a("code",[t._v("Cell Ranger")]),t._v(" pipeline.")]),t._v(" "),a("p",[t._v("Since CWL itself doesn't support the integration of "),a("em",[t._v("R")]),t._v(" packages or\n"),a("em",[t._v("R")]),t._v(" function, this is a unique feature for "),a("code",[t._v("Rcwl")]),t._v(", where we can easily\nconnect the upstream data preprocessing steps (previously based on\ncommand line tools) and the downstream data analysis steps (heavily\ndone in "),a("em",[t._v("R/Bioconductor")]),t._v(").")]),t._v(" "),a("p",[t._v("The idea here is to put anything you need into a user-defined "),a("em",[t._v("R")]),t._v("\nfunction, with specified arguments for input and output files, then\nit's ready to be wrapped as an "),a("code",[t._v("Rcwl")]),t._v(" tools for execution.")]),t._v(" "),a("p",[t._v("For example, in wrapping the "),a("em",[t._v("Bioconductor")]),t._v(" package\n"),a("a",{attrs:{href:"https://bioconductor.org/packages/DropletUtils/",target:"_blank",rel:"noopener noreferrer"}},[t._v("DropletUtils"),a("OutboundLink")],1),t._v("\nfunctionalities, we wrote this "),a("code",[t._v("Rcwl")]),t._v(" tool called\n"),a("a",{attrs:{href:"https://github.com/rworkflow/RcwlRecipes/blob/master/Rcwl/tl_DropletUtils.R",target:"_blank",rel:"noopener noreferrer"}},[t._v("tl_DropletUtils"),a("OutboundLink")],1),t._v("\nwith 3 major steps: 1) use the "),a("code",[t._v("read10xCounts")]),t._v(" function to read the\nraw aligned files and convert into a "),a("code",[t._v("SingleCellExperiment")]),t._v(" object. 2)\ncalculate the barcode ranks and plotting. 3) calculate the empty\ndroplets and plotting. We have also defined the tool output to collect\nthe "),a("code",[t._v("SingleCellExperiment")]),t._v(" Rdata file and diagnostic figures pdf file.")]),t._v(" "),a("div",{staticClass:"language-r extra-class"},[a("pre",{pre:!0,attrs:{class:"language-r"}},[a("code",[t._v("library"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("DropletUtils"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ninputs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("DropletUtils"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nDropletUtils"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("$")]),t._v("dirname "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<-")]),t._v(" file.path"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("outpath"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"STARsolo_output/Solo.out"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nDropletUtils"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("$")]),t._v("lower "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v("\nDropletUtils"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("$")]),t._v("df "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("\nrunCWL"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("DropletUtils"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" outdir "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" file.path"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("outpath"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"dropletUtils_output"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" showLog "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("FALSE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ndir"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("file.path"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("outpath"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"dropletUtils_output"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("Now that we get 2 output files:")]),t._v(" "),a("ol",[a("li",[t._v("The pdf file with 2 diagnostic figures: Barcode ranks, and empty\ndroplets. For details regarding interpretation of each diagnostic\nfigure, please refer to the "),a("a",{attrs:{href:"https://bioconductor.org/packages/release/bioc/vignettes/DropletUtils/inst/doc/DropletUtils.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("DropletUtils\nvignette"),a("OutboundLink")],1),t._v(".")])]),t._v(" "),a("img",{attrs:{src:t.$withBase("/case_studies/scrnaseq/diag1.png"),alt:"barcode ranks"}}),t._v(" "),a("img",{attrs:{src:t.$withBase("/case_studies/scrnaseq/diag2.png"),alt:"empty droplets"}}),t._v(" "),a("div",{staticClass:"language-r extra-class"},[a("pre",{pre:!0,attrs:{class:"language-r"}},[a("code",[t._v("Biobase"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("openPDF"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("file.path"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("outpath"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"dropletUtils_output/diagnostics.pdf"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[t._v("The "),a("code",[t._v("SingleCellExperiment")]),t._v(" object which has filtered out\nunqualified cells and is analysis ready.")])]),t._v(" "),a("div",{staticClass:"language-r extra-class"},[a("pre",{pre:!0,attrs:{class:"language-r"}},[a("code",[t._v("sce "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<-")]),t._v(" readRDS"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("file.path"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("outpath"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"dropletUtils_output/sce_filtered.rds"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nsce\n")])])]),a("h3",{attrs:{id:"scrna-seq-preprocessing-pipeline"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#scrna-seq-preprocessing-pipeline"}},[t._v("#")]),t._v(" scRNA-seq preprocessing pipeline")]),t._v(" "),a("p",[t._v("Alternatively and more easily, we can use the pipeline called\n"),a("code",[t._v("pl_STARsoloDropletUtils")]),t._v(" (recipe\n"),a("a",{attrs:{href:"https://github.com/rworkflow/RcwlRecipes/blob/master/Rcwl/pl_STARsoloDropletUtils.R",target:"_blank",rel:"noopener noreferrer"}},[t._v("here"),a("OutboundLink")],1),t._v(")\nfor the scRNA-seq data preprocessing. This pipeline integrated the\n"),a("code",[t._v("STARsolo")]),t._v(" and "),a("code",[t._v("DropletUtils")]),t._v(" for a streamlined preprocessing analysis\nwithin "),a("em",[t._v("R")]),t._v(". It is included in "),a("code",[t._v("RcwlPipelines")]),t._v(" and is ready to be\ncustomized for your own research. Pipelines can be visualized by the\n"),a("code",[t._v("plotCWL")]),t._v(" function.")]),t._v(" "),a("div",{staticClass:"language-r extra-class"},[a("pre",{pre:!0,attrs:{class:"language-r"}},[a("code",[t._v("STARsoloDropletUtils "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<-")]),t._v(" cwlLoad"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"pl_STARsoloDropletUtils"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("div",{staticClass:"language-r extra-class"},[a("pre",{pre:!0,attrs:{class:"language-r"}},[a("code",[t._v("plotCWL"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("STARsoloDropletUtils"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("img",{attrs:{src:t.$withBase("/case_studies/scrnaseq/workflow.png"),alt:"scRNA-seq preprocessing workflow"}}),t._v(" "),a("p",[t._v("For "),a("code",[t._v("Rcwl")]),t._v(" pipelines, we only need to assign input values for the\nwhole pipeline, not individual tools involved. The input and output\nbetween each step are pre-defined in the pipeline to ensure a smooth\npassing.")]),t._v(" "),a("div",{staticClass:"language-r extra-class"},[a("pre",{pre:!0,attrs:{class:"language-r"}},[a("code",[t._v("inputs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("STARsoloDropletUtils"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nSTARsoloDropletUtils"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("$")]),t._v("fastq_cdna "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<-")]),t._v(" cdna.fastq\nSTARsoloDropletUtils"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("$")]),t._v("fastq_cb "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<-")]),t._v(" cb.fastq\nSTARsoloDropletUtils"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("$")]),t._v("genomeDir "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<-")]),t._v(" file.path"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("outpath"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"STARindex_output/STARindex"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nSTARsoloDropletUtils"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("$")]),t._v("whiteList "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<-")]),t._v(" cblist\nSTARsoloDropletUtils"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("$")]),t._v("runThreadN "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n\nrunCWL"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("STARsoloDropletUtils"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" outdir "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" file.path"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("outpath"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"scpipeline_output"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("The overall output of the pipeline was pre-defined to glob the\nimportant files from separate steps.")]),t._v(" "),a("div",{staticClass:"language-r extra-class"},[a("pre",{pre:!0,attrs:{class:"language-r"}},[a("code",[t._v("outputs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("STARsoloDropletUtils"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ndir"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("file.path"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("outpath"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"scpipeline_output"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" recursive "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("TRUE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"submit-parallel-jobs-for-starsolo"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#submit-parallel-jobs-for-starsolo"}},[t._v("#")]),t._v(" Submit parallel jobs for "),a("code",[t._v("STARsolo")])]),t._v(" "),a("p",[t._v("Powered by "),a("code",[t._v("BiocParallel")]),t._v(","),a("code",[t._v("Rcwl")]),t._v(" supports parallel job running for\nmultiple samples using the "),a("code",[t._v("runCWLBatch")]),t._v(" function. The following\nexample demonstrates how to do the parallel alignment for the 2\nsamples using the "),a("code",[t._v("STARsolo")]),t._v(" tool.")]),t._v(" "),a("p",[t._v("The "),a("code",[t._v("BPPARAM")]),t._v(" argument in "),a("code",[t._v("runCWLBatch()")]),t._v(" defines the parallel\nparameters. It can be defined by "),a("code",[t._v("BiocParallel::BatchtoolsParam")]),t._v("\nfunction, where the "),a("code",[t._v("cluster")]),t._v(' argument takes different values for\ndifferent cluster job manager, such as "multicore", "sge" and\n"slurm". More details about available options can be checked by\n'),a("code",[t._v("?BiocParallel::BatchtoolsParam")]),t._v(".")]),t._v(" "),a("div",{staticClass:"language-r extra-class"},[a("pre",{pre:!0,attrs:{class:"language-r"}},[a("code",[t._v("library"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("BiocParallel"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nbpparam "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<-")]),t._v(" BatchtoolsParam"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("workers "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" cluster "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"sge"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                           template "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" batchtoolsTemplate"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"sge"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v('In the following example, we are using "multicore" for the parallel\nrunning.')]),t._v(" "),a("p",[t._v("The "),a("code",[t._v("inputList")]),t._v(" argument is required to be a list of input parameter\nvalues for samples that are to be computed parallelly. "),a("strong",[t._v("NOTE")]),t._v(" that\nthe names of the list must be consistent with the ids of input\nparameters. In this example, the names are "),a("code",[t._v("readFilesIn_cdna")]),t._v(" and\n"),a("code",[t._v("readFilesIn_cb")]),t._v(".")]),t._v(" "),a("p",[t._v("The "),a("code",[t._v("paramList")]),t._v(" argument is required to be a list of input parameter\nvalues that are to be shared for all parallelly running samples.")]),t._v(" "),a("div",{staticClass:"language-r extra-class"},[a("pre",{pre:!0,attrs:{class:"language-r"}},[a("code",[t._v("bpparam "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<-")]),t._v(" BatchtoolsParam"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("workers "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" cluster "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"multicore"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ninput_lst "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<-")]),t._v(" list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("readFilesIn_cdna "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n                      sample1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cdna.fastq"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                      sample2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cdna.fastq"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                  readFilesIn_cb "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n                      sample1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cb.fastq"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                      sample2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cb.fastq"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nparam_lst "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<-")]),t._v(" list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("whiteList "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cblist"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                  genomeDir "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" genomeDir"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                  runThreadN "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nres "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<-")]),t._v(" runCWLBatch"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cwl "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" STARsolo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                   outdir "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" file.path"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("outpath"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"STARsolo_batch_output"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                   inputList "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" input_lst"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" paramList "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" param_lst"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n                   BPPARAM "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" bpparam"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("The results are saved in separate folders for each parallel sample.")]),t._v(" "),a("div",{staticClass:"language-r extra-class"},[a("pre",{pre:!0,attrs:{class:"language-r"}},[a("code",[t._v("dir"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("file.path"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("outpath"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"STARsolo_batch_output"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" recursive "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("TRUE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## output files")]),t._v("\n")])])]),a("h3",{attrs:{id:"shiny-interface"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#shiny-interface"}},[t._v("#")]),t._v(" Shiny interface")]),t._v(" "),a("p",[a("code",[t._v("cwlShiny()")]),t._v(" opens a user-friendly shiny interface for running any\n"),a("code",[t._v("Rcwl")]),t._v(" tools or pipelines. By default, users need to put in the\nabsolute file path for each input parameter. "),a("strong",[t._v("NOTE")]),t._v(", multiple file\npaths need to be separated by colon. Click the "),a("code",[t._v("run")]),t._v(" button, it will\nstart running and return the output file paths under "),a("code",[t._v("Output")]),t._v("\ntag. Users can also check the "),a("code",[t._v("Command")]),t._v(" and "),a("code",[t._v("Log")]),t._v(" in the shiny\ninterface page.")]),t._v(" "),a("div",{staticClass:"language-r extra-class"},[a("pre",{pre:!0,attrs:{class:"language-r"}},[a("code",[t._v("cwlShiny"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("STARsolo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("img",{attrs:{src:t.$withBase("/case_studies/scrnaseq/cwlShiny_STARsolo.png"),alt:"cwlShiny STARsolo"}}),t._v(" "),a("h2",{attrs:{id:"sessioninfo"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sessioninfo"}},[t._v("#")]),t._v(" SessionInfo")]),t._v(" "),a("div",{staticClass:"language-r extra-class"},[a("pre",{pre:!0,attrs:{class:"language-r"}},[a("code",[t._v("sessionInfo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h2",{attrs:{id:"links"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#links"}},[t._v("#")]),t._v(" Links")]),t._v(" "),a("ol",[a("li",[a("a",{attrs:{href:"https://github.com/rworkflow/Rcwl_scRNAseq",target:"_blank",rel:"noopener noreferrer"}},[t._v("GitHub repository"),a("OutboundLink")],1),t._v(" for the workshop materials and instructions.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://youtu.be/5jkJAfkjFGo",target:"_blank",rel:"noopener noreferrer"}},[t._v("YouTube link"),a("OutboundLink")],1),t._v(" for the Rcwl workshop on BioCAsia2020.")])])])}),[],!1,null,null,null);s.default=n.exports}}]);